trigger:
- release*

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- script: |
    curl -LJO https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar
    echo Unified Agent downloaded successfully
    java -jar wss-unified-agent.jar -d "./dotnetcore-sample"
  env:
    WS_APIKEY: $(APIKEY)
    WS_USERKEY: $(USERKEY)
    WS_PRODUCTNAME: $(System.TeamProject)
    WS_PROJECTNAME: $(Build.Repository.Name)_$(Build.SourceBranchName)
    WS_FILESYSTEMSCAN: false
    WS_CHECKPOLICIES: true
    WS_FORCECHECKALLDEPENDENCIES: true
    WS_EXCLUDES: '**/build/** **/tests/**'
  displayName: 'Unified Agent Scan'

- script: |
    curl --output ./whitesource/VulnerabilityReport.xlsx --request POST https://saas.whitesourcesoftware.com/api/v1.3 --header "Content-Type: application/json" -d "{"requestType":"getProjectVulnerabilityReport", "userKey":"017cdac353d6408585730f387f272505c560c6dcd8a64865b2fc879d1866a80e", "projectToken":"1ba878c5e5744f5381bdbcff5423e4a90ca1f2a22d82442fa39569e4489dc661"}"
    curl --output ./whitesource/RiskReport.pdf --request POST https://saas.whitesourcesoftware.com/api/v1.3 --header "Content-Type: application/json" -d "{"requestType":"getProjectRiskReport", "userKey":"017cdac353d6408585730f387f272505c560c6dcd8a64865b2fc879d1866a80e", "projectToken":"1ba878c5e5744f5381bdbcff5423e4a90ca1f2a22d82442fa39569e4489dc661"}"
    curl --output ./whitesource/DueDiligenceReport.xlsx --request POST https://saas.whitesourcesoftware.com/api/v1.3 --header "Content-Type: application/json" -d "{"requestType":"getProjectDueDiligenceReport", "userKey":"017cdac353d6408585730f387f272505c560c6dcd8a64865b2fc879d1866a80e", "projectToken":"1ba878c5e5744f5381bdbcff5423e4a90ca1f2a22d82442fa39569e4489dc661"}"
  displayName: 'Pipeline Reports' 

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/whitesource'
    contents: |
      index.html
      checkPolicies-json.txt
      policyRejectionSummary.json
      VulnerabilityReport.xlsx
      RiskReport.pdf
      DueDiligenceReport.xlsx
    targetFolder: '$(Build.ArtifactStagingDirectory)/whitesource'
  condition: succeededOrFailed()

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/whitesource'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/whitesource.zip'
  condition: succeededOrFailed()

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/whitesource.zip'
    artifact: 'WitheSource'
  condition: succeededOrFailed()
